// TODO merge event if only correlations is set. In that case the response is written before the request.
Map inputSource = (Map)input.get("source");
List inputEndpoints = (List)inputSource.get("endpoints");

Map targetSource = (Map)((Map)input.get("ctx")).get("_source");
List targetEndpoints = (List)targetSource.get("endpoints");

if (inputEndpoints != null) {
    // Merge endpoints
    for (int sourceEndpointIx=0; sourceEndpointIx < inputEndpoints.size(); sourceEndpointIx++) {
        int targetEndpointIx = -1;
        Map inputEndpoint = (Map)inputEndpoints.get(sourceEndpointIx);
        // Try to find if an endpoint with a given name is present.
        if (targetEndpoints != null) {
            for (int i=0; i < targetEndpoints.size(); i++) { 
            	if ( ((String)((Map)targetEndpoints.get(i)).get("name")).equals(((String)inputEndpoint.get("name"))) ) {
                    targetEndpointIx = i;
                    break;
                }
            }
        }
        if (targetEndpointIx == -1) {
            // This endpoint was not present.
            if (targetEndpoints == null) {
            	targetEndpoints = new ArrayList<Object>();
                targetSource.put("endpoints", targetEndpoints);
            }
            targetEndpoints.add(inputEndpoint);
        } else {
        	Map targetEndpoint = (Map)targetEndpoints.get(targetEndpointIx);
        	Map targetWritingEndpointHandler = (Map)targetEndpoint.get("writing_endpoint_handler");
        	Map inputWritingEndpointHandler = (Map)inputEndpoint.get("writing_endpoint_handler");
            // Endpoint was present. Set writing handler to target if target has no writing handler currently.
            if ((targetWritingEndpointHandler == null ||
            	 targetWritingEndpointHandler.get("transactionId") == null ||
            	 targetWritingEndpointHandler.get("location") == null ||
            	 targetWritingEndpointHandler.get("application") == null
            	) && inputWritingEndpointHandler != null) { 
            	targetEndpoint.put("writing_endpoint_handler", inputWritingEndpointHandler);
            }
            List inputReadingEndpointHandlers = (List)inputEndpoint.get("reading_endpoint_handlers"); 
            if (inputReadingEndpointHandlers != null) {
                // Add reading endpoint handlers to target.
                List targetReadingEndpointHandlers = (List)targetEndpoint.get("reading_endpoint_handlers");
                if (targetReadingEndpointHandlers == null) {
                	targetReadingEndpointHandlers = new ArrayList<Object>();
                    targetEndpoint.put("reading_endpoint_handlers", targetReadingEndpointHandlers);
                }
                for (int i=0; i < inputReadingEndpointHandlers.size(); i++) {
                    targetReadingEndpointHandlers.add(inputReadingEndpointHandlers.get(i));
                }
            }
        }
    }
    // Recalculate latencies
    for (int i=0; i < targetEndpoints.size(); i++) {
    	Map targetWritingEndpointHandler = (Map)((Map)targetEndpoints.get(i)).get("writing_endpoint_handler");
    	if (targetWritingEndpointHandler != null &&
    	    targetWritingEndpointHandler.get("handling_time") != null) {
    	    long writeTime = (long)targetWritingEndpointHandler.get("handling_time");
    	    List readingEndpointHandlers = (List)((Map)targetEndpoints.get(i)).get("reading_endpoint_handlers");
    	    if (readingEndpointHandlers != null) {
    	    	for (int j=0; j < readingEndpointHandlers.size(); j++) {
    	    		Map readingEndpointHandler = readingEndpointHandlers.get(j);
    	    		if (readingEndpointHandler.get("handling_time") != null) {
    	    			readingEndpointHandler.put("latency",  ((long)readingEndpointHandler.get("handling_time")) - writeTime);
    	    		}
    	    	}
    	    }
    	}
    }
 }