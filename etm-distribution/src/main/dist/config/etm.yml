# Enterprise Telemetry Monitor configuration file. When changing this file, keep in mind to remain the indentation as provided! See the manual for a detailed description of all options.  
#
# The binding address of ETM. By default ETM will bind to all ipv4 interfaces
bindingAddress: 0.0.0.0
# The name of the ETM Cluster. When running multiple clusters it is advised to change this name. For example etm-dev for a development cluster.
clusterName: Enterprise Telemetry Monitor
# The name of this node. Although it is not required, it is strongly recommended to give each node in a cluster an unique name.
instanceName: Node_1

# The Elasticsearch configuration options. 
elasticsearch:
# The name of the Elasticsearch cluster to connect to. 
  clusterName: elasticsearch
# A comma separated list of Elasticsearch nodes to connect to.
  connectAddresses: 127.0.0.1:9300
# Boolean indicating ETM should wait before any of the nodes configured in the 'connectAddresses' option is available. When setting this option to false starting ETM will fail when no nodes are available.   
  waitForConnectionOnStartup: false
# To connect to a xpack secured Elasticsearch cluster at a minimum a username and password should be provided.
# The username used to connect to a secured Elasticsearch cluster.
#  username: elastic
# The password used to connect to a secured Elasticsearch cluster.
#  password: changeme
# Should ssl be applied. If set to false all passwords will be send unencrypted to Elasticsearch.
#  sslEnabled: true
# A full path to the client key.
#  sslKeyLocation: /path/to/client.key
# A full path to the client certificate.
#  sslCertificateLocation: /path/to/client.crt
# A full path to the certificate authorities.
#  sslCertificateAuthoritiesLocation: /path/to/ca.crt
# The http configuration options  
http:
# Should the gui be enabled. Set this option to false if you want this node to be an processing node only.
  guiEnabled: true
# The http port this node should be listening on.
  httpPort: 8080
# The https port this node should be listening on. If no keystore is provides, no https binding will be created.
  httpsPort: 8443
# The maximum number of requests that can be handled concurrently. This is the maximum for the rest processor and gui combined. If the number of requests exceeds this number they will be queued.
  maxConcurrentRequests: 100
# The maximum number of request that can be queued before the server will reject further requests.  
  maxQueuedRequests: 100
# Should the rest processor be enabled. Set this option to false if you don't want this node to process events over a rest interface.
  restProcessorEnabled: true
# The location of the keystore that holds the https client certificate. If none provided, the https interface will not start.
  sslKeystoreLocation: null
# The password of the keystore.
  sslKeystorePassword: null
# The keystore type
  sslKeystoreType: PKCS12
# The ssl protocol that will be used.
  sslProtocol: TLSv1.2
# The location of the truststore. This store will hold the information from clients that are allowed to connect to the https interface. 
  sslTruststoreLocation: null
# The password of the truststore.
  sslTruststorePassword: null
# The truststore type
  sslTruststoreType: JKS

# The IBM MQ configuration options.  
ibmMq:
# Should the MQ processor be enabled. Set this option to true if you want to process events from a queue or topic. This option can only be enabled if the correct MQ jar files are added to the Node's classpath.
  enabled: false
# The queuemanagers and queues & topics that need to be read. The following example will demonstrate the usage of this option:
#  queueManagers:
#  - name: QueueManager1
#    host: qmgr.myserver.com
#    port: 1414
#    channel: mychannel
#    destinations:
#    - name: MyDestination1
#      type: queue
#      nrOfListeners: 1
#      messagesType: auto
  queueManagers: []

# The logging options.  
logging:
# Set a specific logger to a specific level. For example
#  loggers:
#    com.jecstar.etm: DEBUG
#    com.jecstar.etm.gui: INFO
# will log all classes of ETM in DEBUG level, with the exception of the classes in the gui component. They are logged in INFO level. 
  loggers: {}
 # The level of the root logger. Can be one of TRACE, DEBUG, INFO, WARNING, ERROR
  rootLogger: INFO