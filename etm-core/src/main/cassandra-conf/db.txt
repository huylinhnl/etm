create keyspace etm with replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
use etm;

create table telemetry_event ( 
    id timeuuid primary key, 
    application text,
    content text,
    correlationCreationTime timestamp,
    correlationData map<text, text>, 
    correlationId timeuuid,
    correlationName text,
    correlations list<timeuuid>,
    creationTime timestamp,
    direction text, 
    endpoint text, 
    expiryTime timestamp, 
    name text,
    sourceCorrelationId text, 
    sourceId text, 
    transactionId timeuuid, 
    transactionName text,
    type text
);

create table transaction_performance (
    transactionName_timeunit text,
    startTime timestamp,
    transactionId timeuuid,
    transactionName text,
    expiryTime timestamp,
    finishTime timestamp,
    primary key (transactionName_timeunit, startTime, transactionId)
);

create table message_performance (
    name_timeunit text,
    startTime timestamp,
    id timeuuid,
    name text,
    expiryTime timestamp,
    finishTime timestamp,
    primary key (name_timeunit, startTime, id)
);

create table message_expiration (
    name_timeunit text,
    expiryTime timestamp,
    id timeuuid,
    name text,
    startTime timestamp,
    finishTime timestamp,
    application text,
    primary key (name_timeunit, expiryTime, id)
);

create table event_occurrences (
    timeunit timestamp,
    type text,
    name text,
    primary key (timeunit, type, name)
);

create table sourceid_id_correlation (
    sourceId text primary key,
    creationTime timestamp,
    expiryTime timestamp,
    id timeuuid,
    transactionId timeuuid,
    transactionName text,
    name text
);

create table correlation_data (
    name_timeunit text,
    name text,
    value text,
    timeunit timestamp,
    id timeuuid, 
    primary key (name_timeunit, name, value, timeunit, id)
);

create table endpoint_config (
    endpoint text primary key,
    direction text,
    applicationParsers list<text>,
    eventNameParsers list<text>,
    correlationParsers map<text, text>,
    transactionNameParsers list<text>,
);

create table application_counter (
    application_timeunit text,
    timeunit timestamp,
    application text,
    count counter,
    messageRequestCount counter,
    incomingMessageRequestCount counter,
    outgoingMessageRequestCount counter,
    messageResponseCount counter,
    incomingMessageResponseCount counter,
    outgoingMessageResponseCount counter,
    messageDatagramCount counter,
    incomingMessageDatagramCount counter,
    outgoingMessageDatagramCount counter,
    messageResponseTime counter,
    incomingMessageResponseTime counter,
    outgoingMessageResponseTime counter,
    primary key (application_timeunit, timeunit, application)
);

create table eventname_counter (
    eventName_timeunit text,
    timeunit timestamp,
    eventName text,
    count counter,
    messageRequestCount counter,
    messageResponseCount counter,
    messageDatagramCount counter,
    messageResponseTime counter,
    primary key (eventName_timeunit, timeunit, eventName)
);

create table application_event_counter (
    application_timeunit text,
    eventName text,
    timeunit timestamp,
    application text,
    count counter,
    messageRequestCount counter,
    incomingMessageRequestCount counter,
    outgoingMessageRequestCount counter,
    messageResponseCount counter,
    incomingMessageResponseCount counter,
    outgoingMessageResponseCount counter,
    messageDatagramCount counter,
    incomingMessageDatagramCount counter,
    outgoingMessageDatagramCount counter,
    messageResponseTime counter,
    incomingMessageResponseTime counter,
    outgoingMessageResponseTime counter,
    primary key (application_timeunit, eventName, timeunit, application)
);

create table transactionname_counter (
    transactionName_timeunit text,
    timeunit timestamp,
    transactionName text,
    count counter,
    transactionStart counter,
    transactionFinish counter,
    transactionResponseTime counter,
    primary key (transactionName_timeunit, timeunit, transactionName)
);

insert into endpoint_config(endpoint, eventNameParsers, correlationParsers) values ('*', ['xpath:local-name(/*)'], {'CustomerId':'xpath:/*/relatienummer', 'PolicyNr':'xpath:/*/overeenkomstnummer'});
insert into endpoint_config(endpoint, direction, applicationParsers, transactionNameParsers) values ('KCS.REQ.ESB', 'OUTGOING', ['KCS'], ['xpath:substring(local-name(//*[ends-with(name(), ''Request'')][1]), 0, string-length(local-name(//*[ends-with(name(), ''Request'')][1])) - 6)']);
insert into endpoint_config(endpoint, direction, applicationParsers) values ('ESB.RPL.KCS', 'INCOMING', ['KCS']);
insert into endpoint_config(endpoint, direction, applicationParsers) values ('ESB.REQ.LG5', 'INCOMING', ['Nieuw Woon']);
insert into endpoint_config(endpoint, direction, applicationParsers) values ('LG5.REQ.ESB', 'OUTGOING', ['Nieuw Woon']);
insert into endpoint_config(endpoint, direction, applicationParsers) values ('LG5.DTG.ESB', 'OUTGOING', ['Nieuw Woon']);
insert into endpoint_config(endpoint, direction, applicationParsers) values ('ESB.RPL.LG5', 'INCOMING', ['Nieuw Woon']);
insert into endpoint_config(endpoint, direction, applicationParsers) values ('LG5.RPL.ESB', 'OUTGOING', ['Nieuw Woon']);
insert into endpoint_config(endpoint, direction, applicationParsers) values ('ESB.DTG.CRM', 'INCOMING', ['Sap CRM']);
insert into endpoint_config(endpoint, direction, applicationParsers) values ('ESB.REQ.PRL', 'INCOMING', ['Parel']);
insert into endpoint_config(endpoint, direction, applicationParsers) values ('PRL.RPL.ESB', 'OUTGOING', ['Parel']);