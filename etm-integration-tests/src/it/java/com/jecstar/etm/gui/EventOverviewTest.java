package com.jecstar.etm.gui;

import static org.junit.Assert.assertTrue;

import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.UUID;

import org.junit.Test;

import com.jecstar.etm.domain.HttpTelemetryEvent;
import com.jecstar.etm.domain.HttpTelemetryEvent.HttpEventType;
import com.jecstar.etm.domain.LogTelemetryEvent;
import com.jecstar.etm.domain.MessagingTelemetryEvent;
import com.jecstar.etm.domain.MessagingTelemetryEvent.MessagingEventType;
import com.jecstar.etm.domain.PayloadFormat;
import com.jecstar.etm.domain.SqlTelemetryEvent;
import com.jecstar.etm.domain.SqlTelemetryEvent.SqlEventType;
import com.jecstar.etm.domain.builders.ApplicationBuilder;
import com.jecstar.etm.domain.builders.EndpointBuilder;
import com.jecstar.etm.domain.builders.EndpointHandlerBuilder;
import com.jecstar.etm.domain.builders.HttpTelemetryEventBuilder;
import com.jecstar.etm.domain.builders.LogTelemetryEventBuilder;
import com.jecstar.etm.domain.builders.MessagingTelemetryEventBuilder;
import com.jecstar.etm.domain.builders.SqlTelemetryEventBuilder;
import com.jecstar.etm.domain.writers.TelemetryEventWriter;
import com.jecstar.etm.domain.writers.json.HttpTelemetryEventWriterJsonImpl;
import com.jecstar.etm.domain.writers.json.LogTelemetryEventWriterJsonImpl;
import com.jecstar.etm.domain.writers.json.MessagingTelemetryEventWriterJsonImpl;
import com.jecstar.etm.domain.writers.json.SqlTelemetryEventWriterJsonImpl;

/**
 * Class testing the event overview.
 * 
 * @author Mark Holster
 */
public class EventOverviewTest extends AbstractIntegrationTest {
	
	private final TelemetryEventWriter<String, HttpTelemetryEvent> httpEventWriter = new HttpTelemetryEventWriterJsonImpl(); 
	private final TelemetryEventWriter<String, LogTelemetryEvent> logEventWriter = new LogTelemetryEventWriterJsonImpl(); 
	private final TelemetryEventWriter<String, MessagingTelemetryEvent> mqEventWriter = new MessagingTelemetryEventWriterJsonImpl(); 
	private final TelemetryEventWriter<String, SqlTelemetryEvent> sqlEventWriter = new SqlTelemetryEventWriterJsonImpl(); 
	
	@Test
	public void testEventOverview() {
		final String eventId = UUID.randomUUID().toString();
		final EndpointHandlerBuilder guiEndpointHandler = new EndpointHandlerBuilder()
				.setTransactionId(UUID.randomUUID().toString())
				.setApplication(new ApplicationBuilder()
						.setName("Gui application")
						.setVersion("1.0.0")
				);
		final EndpointHandlerBuilder backendEndpointHandler = new EndpointHandlerBuilder()
				.setTransactionId(UUID.randomUUID().toString())
				.setApplication(new ApplicationBuilder()
						.setName("My Backend")
						.setVersion("2.1.0_beta3")
				);
		
		// A user requests the shopping card page from our public http site.
		ZonedDateTime timestamp = ZonedDateTime.now();
		guiEndpointHandler.setHandlingTime(timestamp);
		assertTrue(sendEventToEtm("http", this.httpEventWriter.write(new HttpTelemetryEventBuilder()
				.setId(eventId)
				.setPayload("GET http://www.my-company.com/shopping-card.html")
				.setPayloadFormat(PayloadFormat.HTML)
				.setHttpEventType(HttpEventType.GET)
				.setExpiry(timestamp.plusSeconds(30))
				.addMetadata("User-Agent", "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:46.0) Gecko/20100101 Firefox/46.0")
				.addMetadata("Pragma", "no-cache")
				.addOrMergeEndpoint(new EndpointBuilder()
										.setName("/shopping-card.html")
										.addReadingEndpointHandler(guiEndpointHandler)
									)
				.build())));
		
		// Add some logging generated by our gui app.
		timestamp = timestamp.plus(15, ChronoUnit.MILLIS);
		guiEndpointHandler.setHandlingTime(timestamp);
		assertTrue(sendEventToEtm("log", this.logEventWriter.write(new LogTelemetryEventBuilder()
				.setPayload("User is requesting his/her shopping card.")
				.setPayloadFormat(PayloadFormat.TEXT)
				.setLogLevel("DEBUG")
				.addOrMergeEndpoint(new EndpointBuilder()
							.setName("com.my-company.gui.Httphandler.handleRequest(Httphandler.java:59)")
							.setWritingEndpointHandler(guiEndpointHandler)
						)
				.build())));
		
		timestamp = timestamp.plus(8, ChronoUnit.MILLIS);
		guiEndpointHandler.setHandlingTime(timestamp);
		assertTrue(sendEventToEtm("log", this.logEventWriter.write(new LogTelemetryEventBuilder()
				.setPayload("Requesting shoppping card over MQ.")
				.setPayloadFormat(PayloadFormat.TEXT)
				.setLogLevel("DEBUG")
				.addOrMergeEndpoint(new EndpointBuilder()
							.setName("com.my-company.gui.MqRequestor.requestShoppingCar(MqRequestor.java:352)")
							.setWritingEndpointHandler(guiEndpointHandler)
						)
				.build())));
		
		// Now let the gui app send an MQ request to the backend app. 
		timestamp = timestamp.plus(1, ChronoUnit.MILLIS);
		guiEndpointHandler.setHandlingTime(timestamp);
		timestamp = timestamp.plus(3, ChronoUnit.MILLIS);
		backendEndpointHandler.setHandlingTime(timestamp);
		String mqMessageId = UUID.randomUUID().toString();
		assertTrue(sendEventToEtm("messaging", this.mqEventWriter.write(new MessagingTelemetryEventBuilder()
				.setId(mqMessageId)
				.setPayload("<shoppingcard_request><customer_id>543214</customer_id></shoppingcard_request>")
				.setPayloadFormat(PayloadFormat.XML)
				.setMessagingEventType(MessagingEventType.REQUEST)
				.setExpiry(timestamp.plusSeconds(30))
				.addOrMergeEndpoint(new EndpointBuilder()
							.setName("BACKEND.QUEUE.1")
							.setWritingEndpointHandler(guiEndpointHandler)
							.addReadingEndpointHandler(backendEndpointHandler)
						)
				.build())));
		
		// Add some backend logging
		timestamp = timestamp.plus(7, ChronoUnit.MILLIS);
		backendEndpointHandler.setHandlingTime(timestamp);
		assertTrue(sendEventToEtm("log", this.logEventWriter.write(new LogTelemetryEventBuilder()
				.setPayload("Received shopping card request.")
				.setPayloadFormat(PayloadFormat.TEXT)
				.setLogLevel("DEBUG")
				.addOrMergeEndpoint(new EndpointBuilder()
							.setName("com.my-company.backend.MqHandler.handleRequest(MqHandler.java:103)")
							.setWritingEndpointHandler(backendEndpointHandler)
						)
				.build())));
		
		// Request the shopping card from the db.
		timestamp = timestamp.plus(10, ChronoUnit.MILLIS);
		backendEndpointHandler.setHandlingTime(timestamp);
		String sqlRequestId = UUID.randomUUID().toString();
		assertTrue(sendEventToEtm("sql", this.sqlEventWriter.write(new SqlTelemetryEventBuilder()
				.setPayload("select * from shoppingcard where customerId = ?")
				.setId(sqlRequestId)
				.setDbQueryEventType(SqlEventType.SELECT)
				.setPayloadFormat(PayloadFormat.SQL)
				.addOrMergeEndpoint(new EndpointBuilder()
							.setName("TAB_CUSTOMER")
							.setWritingEndpointHandler(backendEndpointHandler)
						)
				.build())));
		timestamp = timestamp.plus(275, ChronoUnit.MILLIS);
		backendEndpointHandler.setHandlingTime(timestamp);
		assertTrue(sendEventToEtm("sql", this.sqlEventWriter.write(new SqlTelemetryEventBuilder()
				.setCorrelationId(sqlRequestId)
				.setPayload("found 10 results")
				.setDbQueryEventType(SqlEventType.RESULTSET)
				.setPayloadFormat(PayloadFormat.SQL)
				.addOrMergeEndpoint(new EndpointBuilder()
							.setName("TAB_CUSTOMER")
							.addReadingEndpointHandler(backendEndpointHandler)
						)
				.build())));
		
		// Send a MQ response back to the gui app.
		timestamp = timestamp.plus(30, ChronoUnit.MILLIS);
		backendEndpointHandler.setHandlingTime(timestamp);
		timestamp = timestamp.plus(4, ChronoUnit.MILLIS);
		guiEndpointHandler.setHandlingTime(timestamp);
		assertTrue(sendEventToEtm("messaging", this.mqEventWriter.write(new MessagingTelemetryEventBuilder()
				.setCorrelationId(mqMessageId)
				.setPayload("<shoppingcard_request><customer_id>543214</customer_id></shoppingcard_request>")
				.setPayloadFormat(PayloadFormat.XML)
				.setMessagingEventType(MessagingEventType.RESPONSE)
				.setExpiry(timestamp.plusSeconds(30))
				.addOrMergeEndpoint(new EndpointBuilder()
							.setName("FRONTEND.QUEUE.1")
							.setWritingEndpointHandler(backendEndpointHandler)
							.addReadingEndpointHandler(guiEndpointHandler)
						)
				.build())));
		
		// And finally let the gui app return the html page.
		timestamp = timestamp.plus(32, ChronoUnit.MILLIS);
		guiEndpointHandler.setHandlingTime(timestamp);
		assertTrue(sendEventToEtm("http", this.httpEventWriter.write(new HttpTelemetryEventBuilder()
				.setCorrelationId(eventId)
				.setPayload("<html><body><p>We found 2 items in your shopping card</p></body></html>")
				.setPayloadFormat(PayloadFormat.HTML)
				.setHttpEventType(HttpEventType.RESPONSE)
				.addOrMergeEndpoint(new EndpointBuilder()
										.setWritingEndpointHandler(guiEndpointHandler)
									)
				.build())));

	}

}
